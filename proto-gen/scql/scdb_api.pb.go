// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: api/scdb_api.proto

package scql

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User_AccountSystemType int32

const (
	User_UNKNOWN     User_AccountSystemType = 0
	User_NATIVE_USER User_AccountSystemType = 1
)

// Enum value maps for User_AccountSystemType.
var (
	User_AccountSystemType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NATIVE_USER",
	}
	User_AccountSystemType_value = map[string]int32{
		"UNKNOWN":     0,
		"NATIVE_USER": 1,
	}
)

func (x User_AccountSystemType) Enum() *User_AccountSystemType {
	p := new(User_AccountSystemType)
	*p = x
	return p
}

func (x User_AccountSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_AccountSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_scdb_api_proto_enumTypes[0].Descriptor()
}

func (User_AccountSystemType) Type() protoreflect.EnumType {
	return &file_api_scdb_api_proto_enumTypes[0]
}

func (x User_AccountSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_AccountSystemType.Descriptor instead.
func (User_AccountSystemType) EnumDescriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{4, 0}
}

// SCDBQueryRequest designed for Client(Biz Service) which allow callback url
// and traceid
type SCDBQueryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Header *RequestHeader         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// User information
	User *SCDBCredential `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// SCQL query to be run.
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// Optional call back URL to report query result.
	// If provided, it should implements the
	// `SCDBQueryResultCallback.ReportQueryResult` method.
	QueryResultCallbackUrl string `protobuf:"bytes,4,opt,name=query_result_callback_url,json=queryResultCallbackUrl,proto3" json:"query_result_callback_url,omitempty"`
	// Biz request id(trace_id provided by the biz client), which often be unique
	// per biz action, e.g. can be value of order_id, transaction_id, etc.
	BizRequestId string `protobuf:"bytes,5,opt,name=biz_request_id,json=bizRequestId,proto3" json:"biz_request_id,omitempty"`
	// Current database name
	DbName string `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// Indicates whether to execute an EXPLAIN statement and return the execution graph in Graphviz DOT format.
	Explain       bool `protobuf:"varint,7,opt,name=explain,proto3" json:"explain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDBQueryRequest) Reset() {
	*x = SCDBQueryRequest{}
	mi := &file_api_scdb_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDBQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDBQueryRequest) ProtoMessage() {}

func (x *SCDBQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDBQueryRequest.ProtoReflect.Descriptor instead.
func (*SCDBQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{0}
}

func (x *SCDBQueryRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SCDBQueryRequest) GetUser() *SCDBCredential {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SCDBQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SCDBQueryRequest) GetQueryResultCallbackUrl() string {
	if x != nil {
		return x.QueryResultCallbackUrl
	}
	return ""
}

func (x *SCDBQueryRequest) GetBizRequestId() string {
	if x != nil {
		return x.BizRequestId
	}
	return ""
}

func (x *SCDBQueryRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *SCDBQueryRequest) GetExplain() bool {
	if x != nil {
		return x.Explain
	}
	return false
}

type SCDBSubmitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of response
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Scdb session id
	ScdbSessionId string `protobuf:"bytes,2,opt,name=scdb_session_id,json=scdbSessionId,proto3" json:"scdb_session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDBSubmitResponse) Reset() {
	*x = SCDBSubmitResponse{}
	mi := &file_api_scdb_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDBSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDBSubmitResponse) ProtoMessage() {}

func (x *SCDBSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDBSubmitResponse.ProtoReflect.Descriptor instead.
func (*SCDBSubmitResponse) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{1}
}

func (x *SCDBSubmitResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SCDBSubmitResponse) GetScdbSessionId() string {
	if x != nil {
		return x.ScdbSessionId
	}
	return ""
}

type SCDBFetchRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Header *RequestHeader         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	User   *SCDBCredential        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Scdb session id
	ScdbSessionId string `protobuf:"bytes,3,opt,name=scdb_session_id,json=scdbSessionId,proto3" json:"scdb_session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDBFetchRequest) Reset() {
	*x = SCDBFetchRequest{}
	mi := &file_api_scdb_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDBFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDBFetchRequest) ProtoMessage() {}

func (x *SCDBFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDBFetchRequest.ProtoReflect.Descriptor instead.
func (*SCDBFetchRequest) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{2}
}

func (x *SCDBFetchRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SCDBFetchRequest) GetUser() *SCDBCredential {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SCDBFetchRequest) GetScdbSessionId() string {
	if x != nil {
		return x.ScdbSessionId
	}
	return ""
}

// SCDB query result representation (table view by columns).
type SCDBQueryResultResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of response
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Output columns.
	OutColumns []*Tensor `protobuf:"bytes,2,rep,name=out_columns,json=outColumns,proto3" json:"out_columns,omitempty"`
	// Scdb session id
	ScdbSessionId string `protobuf:"bytes,3,opt,name=scdb_session_id,json=scdbSessionId,proto3" json:"scdb_session_id,omitempty"`
	// The number of rows affected by a select into, update, insert, or delete
	AffectedRows int64 `protobuf:"varint,4,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	// Warnings for the query
	Warnings      []*SQLWarning `protobuf:"bytes,5,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDBQueryResultResponse) Reset() {
	*x = SCDBQueryResultResponse{}
	mi := &file_api_scdb_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDBQueryResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDBQueryResultResponse) ProtoMessage() {}

func (x *SCDBQueryResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDBQueryResultResponse.ProtoReflect.Descriptor instead.
func (*SCDBQueryResultResponse) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{3}
}

func (x *SCDBQueryResultResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SCDBQueryResultResponse) GetOutColumns() []*Tensor {
	if x != nil {
		return x.OutColumns
	}
	return nil
}

func (x *SCDBQueryResultResponse) GetScdbSessionId() string {
	if x != nil {
		return x.ScdbSessionId
	}
	return ""
}

func (x *SCDBQueryResultResponse) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *SCDBQueryResultResponse) GetWarnings() []*SQLWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type User struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountSystemType User_AccountSystemType `protobuf:"varint,1,opt,name=account_system_type,json=accountSystemType,proto3,enum=scql.pb.User_AccountSystemType" json:"account_system_type,omitempty"`
	// Types that are valid to be assigned to User:
	//
	//	*User_NativeUser_
	User          isUser_User `protobuf_oneof:"user"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_api_scdb_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetAccountSystemType() User_AccountSystemType {
	if x != nil {
		return x.AccountSystemType
	}
	return User_UNKNOWN
}

func (x *User) GetUser() isUser_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *User) GetNativeUser() *User_NativeUser {
	if x != nil {
		if x, ok := x.User.(*User_NativeUser_); ok {
			return x.NativeUser
		}
	}
	return nil
}

type isUser_User interface {
	isUser_User()
}

type User_NativeUser_ struct {
	NativeUser *User_NativeUser `protobuf:"bytes,2,opt,name=native_user,json=nativeUser,proto3,oneof"`
}

func (*User_NativeUser_) isUser_User() {}

type SCDBCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDBCredential) Reset() {
	*x = SCDBCredential{}
	mi := &file_api_scdb_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDBCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDBCredential) ProtoMessage() {}

func (x *SCDBCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDBCredential.ProtoReflect.Descriptor instead.
func (*SCDBCredential) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{5}
}

func (x *SCDBCredential) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type User_NativeUser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User name, e.g. "zhang_san"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Password, e.g. "123456"
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User_NativeUser) Reset() {
	*x = User_NativeUser{}
	mi := &file_api_scdb_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_NativeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_NativeUser) ProtoMessage() {}

func (x *User_NativeUser) ProtoReflect() protoreflect.Message {
	mi := &file_api_scdb_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_NativeUser.ProtoReflect.Descriptor instead.
func (*User_NativeUser) Descriptor() ([]byte, []int) {
	return file_api_scdb_api_proto_rawDescGZIP(), []int{4, 0}
}

func (x *User_NativeUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User_NativeUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_api_scdb_api_proto protoreflect.FileDescriptor

const file_api_scdb_api_proto_rawDesc = "" +
	"\n" +
	"\x12api/scdb_api.proto\x12\ascql.pb\x1a\x0eapi/core.proto\x1a\x10api/common.proto\x1a\x10api/status.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xa3\x02\n" +
	"\x10SCDBQueryRequest\x12.\n" +
	"\x06header\x18\x01 \x01(\v2\x16.scql.pb.RequestHeaderR\x06header\x120\n" +
	"\x04user\x18\x02 \x01(\v2\x17.scql.pb.SCDBCredentialB\x03\xe0A\x02R\x04user\x12\x19\n" +
	"\x05query\x18\x03 \x01(\tB\x03\xe0A\x02R\x05query\x129\n" +
	"\x19query_result_callback_url\x18\x04 \x01(\tR\x16queryResultCallbackUrl\x12$\n" +
	"\x0ebiz_request_id\x18\x05 \x01(\tR\fbizRequestId\x12\x17\n" +
	"\adb_name\x18\x06 \x01(\tR\x06dbName\x12\x18\n" +
	"\aexplain\x18\a \x01(\bR\aexplain\"e\n" +
	"\x12SCDBSubmitResponse\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.scql.pb.StatusR\x06status\x12&\n" +
	"\x0fscdb_session_id\x18\x02 \x01(\tR\rscdbSessionId\"\xa1\x01\n" +
	"\x10SCDBFetchRequest\x12.\n" +
	"\x06header\x18\x01 \x01(\v2\x16.scql.pb.RequestHeaderR\x06header\x120\n" +
	"\x04user\x18\x02 \x01(\v2\x17.scql.pb.SCDBCredentialB\x03\xe0A\x02R\x04user\x12+\n" +
	"\x0fscdb_session_id\x18\x03 \x01(\tB\x03\xe0A\x02R\rscdbSessionId\"\xf2\x01\n" +
	"\x17SCDBQueryResultResponse\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.scql.pb.StatusR\x06status\x120\n" +
	"\vout_columns\x18\x02 \x03(\v2\x0f.scql.pb.TensorR\n" +
	"outColumns\x12&\n" +
	"\x0fscdb_session_id\x18\x03 \x01(\tR\rscdbSessionId\x12#\n" +
	"\raffected_rows\x18\x04 \x01(\x03R\faffectedRows\x12/\n" +
	"\bwarnings\x18\x05 \x03(\v2\x13.scql.pb.SQLWarningR\bwarnings\"\x8d\x02\n" +
	"\x04User\x12O\n" +
	"\x13account_system_type\x18\x01 \x01(\x0e2\x1f.scql.pb.User.AccountSystemTypeR\x11accountSystemType\x12;\n" +
	"\vnative_user\x18\x02 \x01(\v2\x18.scql.pb.User.NativeUserH\x00R\n" +
	"nativeUser\x1a<\n" +
	"\n" +
	"NativeUser\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\"1\n" +
	"\x11AccountSystemType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x0f\n" +
	"\vNATIVE_USER\x10\x01B\x06\n" +
	"\x04user\"3\n" +
	"\x0eSCDBCredential\x12!\n" +
	"\x04user\x18\x01 \x01(\v2\r.scql.pb.UserR\x04user2\xc7\x02\n" +
	"\vSCDBService\x12a\n" +
	"\x06Submit\x12\x19.scql.pb.SCDBQueryRequest\x1a\x1b.scql.pb.SCDBSubmitResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/public/submit_query\x12e\n" +
	"\x05Fetch\x12\x19.scql.pb.SCDBFetchRequest\x1a .scql.pb.SCDBQueryResultResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/public/fetch_result\x12n\n" +
	"\fSubmitAndGet\x12\x19.scql.pb.SCDBQueryRequest\x1a .scql.pb.SCDBQueryResultResponse\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/public/submit_and_get2h\n" +
	"\x17SCDBQueryResultCallback\x12M\n" +
	"\x11ReportQueryResult\x12 .scql.pb.SCDBQueryResultResponse\x1a\x16.google.protobuf.EmptyB\x10Z\x0eproto-gen/scqlb\x06proto3"

var (
	file_api_scdb_api_proto_rawDescOnce sync.Once
	file_api_scdb_api_proto_rawDescData []byte
)

func file_api_scdb_api_proto_rawDescGZIP() []byte {
	file_api_scdb_api_proto_rawDescOnce.Do(func() {
		file_api_scdb_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_scdb_api_proto_rawDesc), len(file_api_scdb_api_proto_rawDesc)))
	})
	return file_api_scdb_api_proto_rawDescData
}

var file_api_scdb_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_scdb_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_scdb_api_proto_goTypes = []any{
	(User_AccountSystemType)(0),     // 0: scql.pb.User.AccountSystemType
	(*SCDBQueryRequest)(nil),        // 1: scql.pb.SCDBQueryRequest
	(*SCDBSubmitResponse)(nil),      // 2: scql.pb.SCDBSubmitResponse
	(*SCDBFetchRequest)(nil),        // 3: scql.pb.SCDBFetchRequest
	(*SCDBQueryResultResponse)(nil), // 4: scql.pb.SCDBQueryResultResponse
	(*User)(nil),                    // 5: scql.pb.User
	(*SCDBCredential)(nil),          // 6: scql.pb.SCDBCredential
	(*User_NativeUser)(nil),         // 7: scql.pb.User.NativeUser
	(*RequestHeader)(nil),           // 8: scql.pb.RequestHeader
	(*Status)(nil),                  // 9: scql.pb.Status
	(*Tensor)(nil),                  // 10: scql.pb.Tensor
	(*SQLWarning)(nil),              // 11: scql.pb.SQLWarning
	(*emptypb.Empty)(nil),           // 12: google.protobuf.Empty
}
var file_api_scdb_api_proto_depIdxs = []int32{
	8,  // 0: scql.pb.SCDBQueryRequest.header:type_name -> scql.pb.RequestHeader
	6,  // 1: scql.pb.SCDBQueryRequest.user:type_name -> scql.pb.SCDBCredential
	9,  // 2: scql.pb.SCDBSubmitResponse.status:type_name -> scql.pb.Status
	8,  // 3: scql.pb.SCDBFetchRequest.header:type_name -> scql.pb.RequestHeader
	6,  // 4: scql.pb.SCDBFetchRequest.user:type_name -> scql.pb.SCDBCredential
	9,  // 5: scql.pb.SCDBQueryResultResponse.status:type_name -> scql.pb.Status
	10, // 6: scql.pb.SCDBQueryResultResponse.out_columns:type_name -> scql.pb.Tensor
	11, // 7: scql.pb.SCDBQueryResultResponse.warnings:type_name -> scql.pb.SQLWarning
	0,  // 8: scql.pb.User.account_system_type:type_name -> scql.pb.User.AccountSystemType
	7,  // 9: scql.pb.User.native_user:type_name -> scql.pb.User.NativeUser
	5,  // 10: scql.pb.SCDBCredential.user:type_name -> scql.pb.User
	1,  // 11: scql.pb.SCDBService.Submit:input_type -> scql.pb.SCDBQueryRequest
	3,  // 12: scql.pb.SCDBService.Fetch:input_type -> scql.pb.SCDBFetchRequest
	1,  // 13: scql.pb.SCDBService.SubmitAndGet:input_type -> scql.pb.SCDBQueryRequest
	4,  // 14: scql.pb.SCDBQueryResultCallback.ReportQueryResult:input_type -> scql.pb.SCDBQueryResultResponse
	2,  // 15: scql.pb.SCDBService.Submit:output_type -> scql.pb.SCDBSubmitResponse
	4,  // 16: scql.pb.SCDBService.Fetch:output_type -> scql.pb.SCDBQueryResultResponse
	4,  // 17: scql.pb.SCDBService.SubmitAndGet:output_type -> scql.pb.SCDBQueryResultResponse
	12, // 18: scql.pb.SCDBQueryResultCallback.ReportQueryResult:output_type -> google.protobuf.Empty
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_scdb_api_proto_init() }
func file_api_scdb_api_proto_init() {
	if File_api_scdb_api_proto != nil {
		return
	}
	file_api_core_proto_init()
	file_api_common_proto_init()
	file_api_status_proto_init()
	file_api_scdb_api_proto_msgTypes[4].OneofWrappers = []any{
		(*User_NativeUser_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_scdb_api_proto_rawDesc), len(file_api_scdb_api_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_scdb_api_proto_goTypes,
		DependencyIndexes: file_api_scdb_api_proto_depIdxs,
		EnumInfos:         file_api_scdb_api_proto_enumTypes,
		MessageInfos:      file_api_scdb_api_proto_msgTypes,
	}.Build()
	File_api_scdb_api_proto = out.File
	file_api_scdb_api_proto_goTypes = nil
	file_api_scdb_api_proto_depIdxs = nil
}
